// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MedianFilter_MedianFilter,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.654000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=74,HLS_SYN_LUT=451,HLS_VERSION=2020_2}" *)

module MedianFilter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        row1,
        row2,
        row3,
        V,
        V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [7:0] row1;
input  [7:0] row2;
input  [7:0] row3;
output  [7:0] V;
output   V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] pixelWindowBuffer_1;
reg   [7:0] pixelWindowBuffer_0;
reg   [7:0] pixelWindowBuffer_4;
reg   [7:0] pixelWindowBuffer_3;
reg   [7:0] pixelWindowBuffer_7;
reg   [7:0] pixelWindowBuffer_6;
wire   [7:0] temp_10_fu_381_p3;
reg   [7:0] temp_10_reg_474;
wire   [7:0] select_ln14_fu_409_p3;
reg   [7:0] select_ln14_reg_480;
wire   [7:0] temp_12_fu_423_p3;
reg   [7:0] temp_12_reg_487;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln10_fu_127_p2;
wire   [0:0] icmp_ln10_1_fu_149_p2;
wire   [0:0] icmp_ln10_2_fu_171_p2;
wire   [7:0] select_ln10_1_fu_141_p3;
wire   [0:0] icmp_ln11_fu_193_p2;
wire   [7:0] select_ln10_3_fu_163_p3;
wire   [0:0] icmp_ln11_1_fu_215_p2;
wire   [7:0] select_ln10_5_fu_185_p3;
wire   [0:0] icmp_ln11_2_fu_237_p2;
wire   [7:0] temp_2_fu_207_p3;
wire   [7:0] select_ln10_fu_133_p3;
wire   [0:0] icmp_ln12_fu_259_p2;
wire   [7:0] temp_3_fu_229_p3;
wire   [7:0] select_ln10_2_fu_155_p3;
wire   [0:0] icmp_ln12_1_fu_281_p2;
wire   [7:0] temp_4_fu_251_p3;
wire   [7:0] select_ln10_4_fu_177_p3;
wire   [0:0] icmp_ln12_2_fu_303_p2;
wire   [7:0] temp_1_fu_199_p3;
wire   [7:0] select_ln11_fu_221_p3;
wire   [0:0] icmp_ln13_fu_325_p2;
wire   [7:0] temp_8_fu_295_p3;
wire   [7:0] select_ln12_2_fu_317_p3;
wire   [0:0] icmp_ln13_1_fu_339_p2;
wire   [7:0] temp_7_fu_287_p3;
wire   [7:0] select_ln12_fu_309_p3;
wire   [0:0] icmp_ln13_2_fu_353_p2;
wire   [7:0] temp_9_fu_331_p3;
wire   [7:0] select_ln11_3_fu_243_p3;
wire   [0:0] icmp_ln14_fu_375_p2;
wire   [7:0] temp_6_fu_273_p3;
wire   [7:0] select_ln13_2_fu_367_p3;
wire   [0:0] icmp_ln14_1_fu_389_p2;
wire   [7:0] temp_5_fu_265_p3;
wire   [7:0] select_ln13_fu_345_p3;
wire   [0:0] icmp_ln14_2_fu_403_p2;
wire   [7:0] temp_11_fu_395_p3;
wire   [7:0] select_ln13_1_fu_359_p3;
wire   [0:0] icmp_ln15_fu_417_p2;
wire   [0:0] icmp_ln15_1_fu_431_p2;
wire   [7:0] select_ln15_1_fu_441_p3;
wire   [0:0] icmp_ln15_2_fu_447_p2;
wire   [7:0] temp_13_fu_452_p3;
wire   [7:0] select_ln15_fu_435_p3;
wire   [0:0] icmp_ln16_fu_459_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 pixelWindowBuffer_1 = 8'd0;
#0 pixelWindowBuffer_0 = 8'd0;
#0 pixelWindowBuffer_4 = 8'd0;
#0 pixelWindowBuffer_3 = 8'd0;
#0 pixelWindowBuffer_7 = 8'd0;
#0 pixelWindowBuffer_6 = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixelWindowBuffer_0 <= row1;
        pixelWindowBuffer_1 <= pixelWindowBuffer_0;
        pixelWindowBuffer_3 <= row2;
        pixelWindowBuffer_4 <= pixelWindowBuffer_3;
        pixelWindowBuffer_6 <= row3;
        pixelWindowBuffer_7 <= pixelWindowBuffer_6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln14_reg_480 <= select_ln14_fu_409_p3;
        temp_10_reg_474 <= temp_10_fu_381_p3;
        temp_12_reg_487 <= temp_12_fu_423_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        V_ap_vld = 1'b1;
    end else begin
        V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign V = ((icmp_ln16_fu_459_p2[0:0] == 1'b1) ? select_ln15_fu_435_p3 : temp_13_fu_452_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln10_1_fu_149_p2 = ((pixelWindowBuffer_3 > pixelWindowBuffer_4) ? 1'b1 : 1'b0);

assign icmp_ln10_2_fu_171_p2 = ((pixelWindowBuffer_6 > pixelWindowBuffer_7) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_127_p2 = ((pixelWindowBuffer_0 > pixelWindowBuffer_1) ? 1'b1 : 1'b0);

assign icmp_ln11_1_fu_215_p2 = ((select_ln10_3_fu_163_p3 < row2) ? 1'b1 : 1'b0);

assign icmp_ln11_2_fu_237_p2 = ((select_ln10_5_fu_185_p3 < row3) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_193_p2 = ((select_ln10_1_fu_141_p3 < row1) ? 1'b1 : 1'b0);

assign icmp_ln12_1_fu_281_p2 = ((temp_3_fu_229_p3 > select_ln10_2_fu_155_p3) ? 1'b1 : 1'b0);

assign icmp_ln12_2_fu_303_p2 = ((temp_4_fu_251_p3 > select_ln10_4_fu_177_p3) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_259_p2 = ((temp_2_fu_207_p3 > select_ln10_fu_133_p3) ? 1'b1 : 1'b0);

assign icmp_ln13_1_fu_339_p2 = ((temp_8_fu_295_p3 > select_ln12_2_fu_317_p3) ? 1'b1 : 1'b0);

assign icmp_ln13_2_fu_353_p2 = ((temp_7_fu_287_p3 > select_ln12_fu_309_p3) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_325_p2 = ((temp_1_fu_199_p3 > select_ln11_fu_221_p3) ? 1'b1 : 1'b0);

assign icmp_ln14_1_fu_389_p2 = ((temp_6_fu_273_p3 > select_ln13_2_fu_367_p3) ? 1'b1 : 1'b0);

assign icmp_ln14_2_fu_403_p2 = ((temp_5_fu_265_p3 > select_ln13_fu_345_p3) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_375_p2 = ((temp_9_fu_331_p3 > select_ln11_3_fu_243_p3) ? 1'b1 : 1'b0);

assign icmp_ln15_1_fu_431_p2 = ((temp_12_reg_487 > select_ln14_reg_480) ? 1'b1 : 1'b0);

assign icmp_ln15_2_fu_447_p2 = ((temp_10_reg_474 > select_ln15_1_fu_441_p3) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_417_p2 = ((temp_11_fu_395_p3 > select_ln13_1_fu_359_p3) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_459_p2 = ((temp_13_fu_452_p3 > select_ln15_fu_435_p3) ? 1'b1 : 1'b0);

assign select_ln10_1_fu_141_p3 = ((icmp_ln10_fu_127_p2[0:0] == 1'b1) ? pixelWindowBuffer_1 : pixelWindowBuffer_0);

assign select_ln10_2_fu_155_p3 = ((icmp_ln10_1_fu_149_p2[0:0] == 1'b1) ? pixelWindowBuffer_3 : pixelWindowBuffer_4);

assign select_ln10_3_fu_163_p3 = ((icmp_ln10_1_fu_149_p2[0:0] == 1'b1) ? pixelWindowBuffer_4 : pixelWindowBuffer_3);

assign select_ln10_4_fu_177_p3 = ((icmp_ln10_2_fu_171_p2[0:0] == 1'b1) ? pixelWindowBuffer_6 : pixelWindowBuffer_7);

assign select_ln10_5_fu_185_p3 = ((icmp_ln10_2_fu_171_p2[0:0] == 1'b1) ? pixelWindowBuffer_7 : pixelWindowBuffer_6);

assign select_ln10_fu_133_p3 = ((icmp_ln10_fu_127_p2[0:0] == 1'b1) ? pixelWindowBuffer_0 : pixelWindowBuffer_1);

assign select_ln11_3_fu_243_p3 = ((icmp_ln11_2_fu_237_p2[0:0] == 1'b1) ? select_ln10_5_fu_185_p3 : row3);

assign select_ln11_fu_221_p3 = ((icmp_ln11_1_fu_215_p2[0:0] == 1'b1) ? select_ln10_3_fu_163_p3 : row2);

assign select_ln12_2_fu_317_p3 = ((icmp_ln12_2_fu_303_p2[0:0] == 1'b1) ? temp_4_fu_251_p3 : select_ln10_4_fu_177_p3);

assign select_ln12_fu_309_p3 = ((icmp_ln12_2_fu_303_p2[0:0] == 1'b1) ? select_ln10_4_fu_177_p3 : temp_4_fu_251_p3);

assign select_ln13_1_fu_359_p3 = ((icmp_ln13_2_fu_353_p2[0:0] == 1'b1) ? temp_7_fu_287_p3 : select_ln12_fu_309_p3);

assign select_ln13_2_fu_367_p3 = ((icmp_ln13_2_fu_353_p2[0:0] == 1'b1) ? select_ln12_fu_309_p3 : temp_7_fu_287_p3);

assign select_ln13_fu_345_p3 = ((icmp_ln13_1_fu_339_p2[0:0] == 1'b1) ? select_ln12_2_fu_317_p3 : temp_8_fu_295_p3);

assign select_ln14_fu_409_p3 = ((icmp_ln14_2_fu_403_p2[0:0] == 1'b1) ? select_ln13_fu_345_p3 : temp_5_fu_265_p3);

assign select_ln15_1_fu_441_p3 = ((icmp_ln15_1_fu_431_p2[0:0] == 1'b1) ? select_ln14_reg_480 : temp_12_reg_487);

assign select_ln15_fu_435_p3 = ((icmp_ln15_1_fu_431_p2[0:0] == 1'b1) ? temp_12_reg_487 : select_ln14_reg_480);

assign temp_10_fu_381_p3 = ((icmp_ln14_fu_375_p2[0:0] == 1'b1) ? temp_9_fu_331_p3 : select_ln11_3_fu_243_p3);

assign temp_11_fu_395_p3 = ((icmp_ln14_1_fu_389_p2[0:0] == 1'b1) ? temp_6_fu_273_p3 : select_ln13_2_fu_367_p3);

assign temp_12_fu_423_p3 = ((icmp_ln15_fu_417_p2[0:0] == 1'b1) ? select_ln13_1_fu_359_p3 : temp_11_fu_395_p3);

assign temp_13_fu_452_p3 = ((icmp_ln15_2_fu_447_p2[0:0] == 1'b1) ? temp_10_reg_474 : select_ln15_1_fu_441_p3);

assign temp_1_fu_199_p3 = ((icmp_ln11_fu_193_p2[0:0] == 1'b1) ? select_ln10_1_fu_141_p3 : row1);

assign temp_2_fu_207_p3 = ((icmp_ln11_fu_193_p2[0:0] == 1'b1) ? row1 : select_ln10_1_fu_141_p3);

assign temp_3_fu_229_p3 = ((icmp_ln11_1_fu_215_p2[0:0] == 1'b1) ? row2 : select_ln10_3_fu_163_p3);

assign temp_4_fu_251_p3 = ((icmp_ln11_2_fu_237_p2[0:0] == 1'b1) ? row3 : select_ln10_5_fu_185_p3);

assign temp_5_fu_265_p3 = ((icmp_ln12_fu_259_p2[0:0] == 1'b1) ? temp_2_fu_207_p3 : select_ln10_fu_133_p3);

assign temp_6_fu_273_p3 = ((icmp_ln12_fu_259_p2[0:0] == 1'b1) ? select_ln10_fu_133_p3 : temp_2_fu_207_p3);

assign temp_7_fu_287_p3 = ((icmp_ln12_1_fu_281_p2[0:0] == 1'b1) ? select_ln10_2_fu_155_p3 : temp_3_fu_229_p3);

assign temp_8_fu_295_p3 = ((icmp_ln12_1_fu_281_p2[0:0] == 1'b1) ? temp_3_fu_229_p3 : select_ln10_2_fu_155_p3);

assign temp_9_fu_331_p3 = ((icmp_ln13_fu_325_p2[0:0] == 1'b1) ? temp_1_fu_199_p3 : select_ln11_fu_221_p3);

endmodule //MedianFilter
