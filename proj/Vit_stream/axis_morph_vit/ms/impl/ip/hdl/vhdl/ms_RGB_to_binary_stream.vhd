-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ms_RGB_to_binary_stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_32b_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_32b_empty_n : IN STD_LOGIC;
    in_32b_read : OUT STD_LOGIC;
    out_bw_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_bw_full_n : IN STD_LOGIC;
    out_bw_write : OUT STD_LOGIC );
end;


architecture behav of ms_RGB_to_binary_stream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FBD2F1A9FBE76C9 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111101001011110001101010011111101111100111011011001001";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_3840 : STD_LOGIC_VECTOR (13 downto 0) := "11100001000000";
    constant ap_const_lv14_383F : STD_LOGIC_VECTOR (13 downto 0) := "11100000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_75 : STD_LOGIC_VECTOR (7 downto 0) := "01110101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_32b_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln14_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_bw_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal icmp_ln14_reg_459_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_reg_113 : STD_LOGIC_VECTOR (13 downto 0);
    signal pixel_1_fu_149_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln14_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_459_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_BW_pkt_last_reg_463_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_468 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_reg_473 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i_reg_488 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i23_i_reg_493 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_i_reg_498 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i24_i_reg_503 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i_reg_508 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_reg_513 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_reg_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_reg_518_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_reg_518_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal in_grey_V_12_fu_224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_grey_V_12_reg_524 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_grey_V_12_reg_524_pp0_iter30_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln323_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_reg_530_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_234_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_537 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln326_fu_240_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln326_reg_543 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln327_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_reg_548_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_276_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sh_amt_1_reg_560 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_grey_V_7_fu_335_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_grey_V_7_reg_565 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln337_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln337_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_grey_V_13_fu_408_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_grey_V_13_reg_580 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_143_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_146_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_fu_187_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal exp_fu_210_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln306_fu_206_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln311_fu_220_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln315_fu_256_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_259_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_3_fu_281_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln331_fu_297_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln320_fu_267_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln331_fu_300_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln331_fu_304_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal or_ln327_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln327_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln329_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grey_V_5_fu_310_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln329_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln337_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln329_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln330_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1cast_fu_377_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln339_fu_380_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_grey_V_8_fu_385_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln323_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln327_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_grey_V_10_fu_391_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grey_V_7_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_grey_V_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_BW_V_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_440_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_124_ce : STD_LOGIC;
    signal grp_fu_128_ce : STD_LOGIC;
    signal grp_fu_133_ce : STD_LOGIC;
    signal grp_fu_138_ce : STD_LOGIC;
    signal grp_fu_143_ce : STD_LOGIC;
    signal grp_fu_146_ce : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ms_dadd_64ns_64ns_64_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ms_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ms_sitodp_64ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dadd_64ns_64ns_64_7_full_dsp_1_U16 : component ms_dadd_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_i_i_reg_498,
        din1 => mul_i24_i_reg_503,
        ce => grp_fu_124_ce,
        dout => grp_fu_124_p2);

    dadd_64ns_64ns_64_7_full_dsp_1_U17 : component ms_dadd_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_i_reg_508,
        din1 => ap_const_lv64_0,
        ce => grp_fu_128_ce,
        dout => grp_fu_128_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U18 : component ms_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_i_i_reg_488,
        din1 => ap_const_lv64_3FBD2F1A9FBE76C9,
        ce => grp_fu_133_ce,
        dout => grp_fu_133_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U19 : component ms_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_i23_i_reg_493,
        din1 => ap_const_lv64_3FE2C8B439581062,
        ce => grp_fu_138_ce,
        dout => grp_fu_138_p2);

    sitodp_64ns_64_6_no_dsp_1_U20 : component ms_sitodp_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_143_p0,
        ce => grp_fu_143_ce,
        dout => grp_fu_143_p1);

    sitodp_64ns_64_6_no_dsp_1_U21 : component ms_sitodp_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_146_p0,
        ce => grp_fu_146_ce,
        dout => grp_fu_146_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pixel_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln14_fu_155_p2 = ap_const_lv1_0))) then 
                pixel_reg_113 <= pixel_1_fu_149_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pixel_reg_113 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_459_pp0_iter20_reg = ap_const_lv1_0))) then
                add_i_reg_508 <= grp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_459_pp0_iter29_reg = ap_const_lv1_0))) then
                and_ln337_reg_570 <= and_ln337_fu_354_p2;
                in_grey_V_7_reg_565 <= in_grey_V_7_fu_335_p3;
                or_ln330_reg_575 <= or_ln330_fu_372_p2;
                sh_amt_1_reg_560 <= sh_amt_1_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_459_pp0_iter6_reg = ap_const_lv1_0))) then
                conv_i23_i_reg_493 <= grp_fu_146_p1;
                conv_i_i_reg_488 <= grp_fu_143_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln14_reg_459 <= icmp_ln14_fu_155_p2;
                icmp_ln14_reg_459_pp0_iter1_reg <= icmp_ln14_reg_459;
                temp_BW_pkt_last_reg_463_pp0_iter1_reg <= temp_BW_pkt_last_reg_463;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln14_reg_459_pp0_iter10_reg <= icmp_ln14_reg_459_pp0_iter9_reg;
                icmp_ln14_reg_459_pp0_iter11_reg <= icmp_ln14_reg_459_pp0_iter10_reg;
                icmp_ln14_reg_459_pp0_iter12_reg <= icmp_ln14_reg_459_pp0_iter11_reg;
                icmp_ln14_reg_459_pp0_iter13_reg <= icmp_ln14_reg_459_pp0_iter12_reg;
                icmp_ln14_reg_459_pp0_iter14_reg <= icmp_ln14_reg_459_pp0_iter13_reg;
                icmp_ln14_reg_459_pp0_iter15_reg <= icmp_ln14_reg_459_pp0_iter14_reg;
                icmp_ln14_reg_459_pp0_iter16_reg <= icmp_ln14_reg_459_pp0_iter15_reg;
                icmp_ln14_reg_459_pp0_iter17_reg <= icmp_ln14_reg_459_pp0_iter16_reg;
                icmp_ln14_reg_459_pp0_iter18_reg <= icmp_ln14_reg_459_pp0_iter17_reg;
                icmp_ln14_reg_459_pp0_iter19_reg <= icmp_ln14_reg_459_pp0_iter18_reg;
                icmp_ln14_reg_459_pp0_iter20_reg <= icmp_ln14_reg_459_pp0_iter19_reg;
                icmp_ln14_reg_459_pp0_iter21_reg <= icmp_ln14_reg_459_pp0_iter20_reg;
                icmp_ln14_reg_459_pp0_iter22_reg <= icmp_ln14_reg_459_pp0_iter21_reg;
                icmp_ln14_reg_459_pp0_iter23_reg <= icmp_ln14_reg_459_pp0_iter22_reg;
                icmp_ln14_reg_459_pp0_iter24_reg <= icmp_ln14_reg_459_pp0_iter23_reg;
                icmp_ln14_reg_459_pp0_iter25_reg <= icmp_ln14_reg_459_pp0_iter24_reg;
                icmp_ln14_reg_459_pp0_iter26_reg <= icmp_ln14_reg_459_pp0_iter25_reg;
                icmp_ln14_reg_459_pp0_iter27_reg <= icmp_ln14_reg_459_pp0_iter26_reg;
                icmp_ln14_reg_459_pp0_iter28_reg <= icmp_ln14_reg_459_pp0_iter27_reg;
                icmp_ln14_reg_459_pp0_iter29_reg <= icmp_ln14_reg_459_pp0_iter28_reg;
                icmp_ln14_reg_459_pp0_iter2_reg <= icmp_ln14_reg_459_pp0_iter1_reg;
                icmp_ln14_reg_459_pp0_iter30_reg <= icmp_ln14_reg_459_pp0_iter29_reg;
                icmp_ln14_reg_459_pp0_iter31_reg <= icmp_ln14_reg_459_pp0_iter30_reg;
                icmp_ln14_reg_459_pp0_iter3_reg <= icmp_ln14_reg_459_pp0_iter2_reg;
                icmp_ln14_reg_459_pp0_iter4_reg <= icmp_ln14_reg_459_pp0_iter3_reg;
                icmp_ln14_reg_459_pp0_iter5_reg <= icmp_ln14_reg_459_pp0_iter4_reg;
                icmp_ln14_reg_459_pp0_iter6_reg <= icmp_ln14_reg_459_pp0_iter5_reg;
                icmp_ln14_reg_459_pp0_iter7_reg <= icmp_ln14_reg_459_pp0_iter6_reg;
                icmp_ln14_reg_459_pp0_iter8_reg <= icmp_ln14_reg_459_pp0_iter7_reg;
                icmp_ln14_reg_459_pp0_iter9_reg <= icmp_ln14_reg_459_pp0_iter8_reg;
                icmp_ln323_reg_530_pp0_iter30_reg <= icmp_ln323_reg_530;
                icmp_ln327_reg_548_pp0_iter30_reg <= icmp_ln327_reg_548;
                in_grey_V_12_reg_524_pp0_iter30_reg <= in_grey_V_12_reg_524;
                reg_reg_518_pp0_iter30_reg <= reg_reg_518;
                reg_reg_518_pp0_iter31_reg <= reg_reg_518_pp0_iter30_reg;
                temp_BW_pkt_last_reg_463_pp0_iter10_reg <= temp_BW_pkt_last_reg_463_pp0_iter9_reg;
                temp_BW_pkt_last_reg_463_pp0_iter11_reg <= temp_BW_pkt_last_reg_463_pp0_iter10_reg;
                temp_BW_pkt_last_reg_463_pp0_iter12_reg <= temp_BW_pkt_last_reg_463_pp0_iter11_reg;
                temp_BW_pkt_last_reg_463_pp0_iter13_reg <= temp_BW_pkt_last_reg_463_pp0_iter12_reg;
                temp_BW_pkt_last_reg_463_pp0_iter14_reg <= temp_BW_pkt_last_reg_463_pp0_iter13_reg;
                temp_BW_pkt_last_reg_463_pp0_iter15_reg <= temp_BW_pkt_last_reg_463_pp0_iter14_reg;
                temp_BW_pkt_last_reg_463_pp0_iter16_reg <= temp_BW_pkt_last_reg_463_pp0_iter15_reg;
                temp_BW_pkt_last_reg_463_pp0_iter17_reg <= temp_BW_pkt_last_reg_463_pp0_iter16_reg;
                temp_BW_pkt_last_reg_463_pp0_iter18_reg <= temp_BW_pkt_last_reg_463_pp0_iter17_reg;
                temp_BW_pkt_last_reg_463_pp0_iter19_reg <= temp_BW_pkt_last_reg_463_pp0_iter18_reg;
                temp_BW_pkt_last_reg_463_pp0_iter20_reg <= temp_BW_pkt_last_reg_463_pp0_iter19_reg;
                temp_BW_pkt_last_reg_463_pp0_iter21_reg <= temp_BW_pkt_last_reg_463_pp0_iter20_reg;
                temp_BW_pkt_last_reg_463_pp0_iter22_reg <= temp_BW_pkt_last_reg_463_pp0_iter21_reg;
                temp_BW_pkt_last_reg_463_pp0_iter23_reg <= temp_BW_pkt_last_reg_463_pp0_iter22_reg;
                temp_BW_pkt_last_reg_463_pp0_iter24_reg <= temp_BW_pkt_last_reg_463_pp0_iter23_reg;
                temp_BW_pkt_last_reg_463_pp0_iter25_reg <= temp_BW_pkt_last_reg_463_pp0_iter24_reg;
                temp_BW_pkt_last_reg_463_pp0_iter26_reg <= temp_BW_pkt_last_reg_463_pp0_iter25_reg;
                temp_BW_pkt_last_reg_463_pp0_iter27_reg <= temp_BW_pkt_last_reg_463_pp0_iter26_reg;
                temp_BW_pkt_last_reg_463_pp0_iter28_reg <= temp_BW_pkt_last_reg_463_pp0_iter27_reg;
                temp_BW_pkt_last_reg_463_pp0_iter29_reg <= temp_BW_pkt_last_reg_463_pp0_iter28_reg;
                temp_BW_pkt_last_reg_463_pp0_iter2_reg <= temp_BW_pkt_last_reg_463_pp0_iter1_reg;
                temp_BW_pkt_last_reg_463_pp0_iter30_reg <= temp_BW_pkt_last_reg_463_pp0_iter29_reg;
                temp_BW_pkt_last_reg_463_pp0_iter31_reg <= temp_BW_pkt_last_reg_463_pp0_iter30_reg;
                temp_BW_pkt_last_reg_463_pp0_iter3_reg <= temp_BW_pkt_last_reg_463_pp0_iter2_reg;
                temp_BW_pkt_last_reg_463_pp0_iter4_reg <= temp_BW_pkt_last_reg_463_pp0_iter3_reg;
                temp_BW_pkt_last_reg_463_pp0_iter5_reg <= temp_BW_pkt_last_reg_463_pp0_iter4_reg;
                temp_BW_pkt_last_reg_463_pp0_iter6_reg <= temp_BW_pkt_last_reg_463_pp0_iter5_reg;
                temp_BW_pkt_last_reg_463_pp0_iter7_reg <= temp_BW_pkt_last_reg_463_pp0_iter6_reg;
                temp_BW_pkt_last_reg_463_pp0_iter8_reg <= temp_BW_pkt_last_reg_463_pp0_iter7_reg;
                temp_BW_pkt_last_reg_463_pp0_iter9_reg <= temp_BW_pkt_last_reg_463_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_459_pp0_iter28_reg = ap_const_lv1_0))) then
                icmp_ln323_reg_530 <= icmp_ln323_fu_228_p2;
                icmp_ln327_reg_548 <= icmp_ln327_fu_244_p2;
                icmp_ln329_reg_554 <= icmp_ln329_fu_250_p2;
                in_grey_V_12_reg_524 <= in_grey_V_12_fu_224_p1;
                reg_reg_518 <= reg_fu_203_p1;
                sh_amt_reg_537 <= sh_amt_fu_234_p2;
                trunc_ln326_reg_543 <= trunc_ln326_fu_240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_459_pp0_iter30_reg = ap_const_lv1_0))) then
                in_grey_V_13_reg_580 <= in_grey_V_13_fu_408_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_459_pp0_iter13_reg = ap_const_lv1_0))) then
                mul_i24_i_reg_503 <= grp_fu_138_p2;
                mul_i_i_reg_498 <= grp_fu_133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_459 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                r_reg_473 <= in_32b_dout(15 downto 8);
                tmp_reg_468 <= in_32b_dout(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln14_fu_155_p2 = ap_const_lv1_0))) then
                temp_BW_pkt_last_reg_463 <= temp_BW_pkt_last_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_459_pp0_iter27_reg = ap_const_lv1_0))) then
                val_reg_513 <= grp_fu_128_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter0, icmp_ln14_fu_155_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter31)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln14_fu_155_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln14_fu_155_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    and_ln327_fu_403_p2 <= (xor_ln323_fu_398_p2 and icmp_ln327_reg_548_pp0_iter30_reg);
    and_ln329_fu_324_p2 <= (xor_ln327_fu_318_p2 and icmp_ln329_reg_554);
    and_ln330_1_fu_366_p2 <= (xor_ln330_fu_360_p2 and and_ln329_fu_324_p2);
    and_ln330_fu_329_p2 <= (icmp_ln330_fu_271_p2 and and_ln329_fu_324_p2);
    and_ln337_fu_354_p2 <= (xor_ln329_fu_348_p2 and icmp_ln337_fu_291_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state35 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_32b_empty_n, out_bw_full_n, ap_enable_reg_pp0_iter1, icmp_ln14_reg_459, ap_enable_reg_pp0_iter32, icmp_ln14_reg_459_pp0_iter31_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln14_reg_459_pp0_iter31_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (out_bw_full_n = ap_const_logic_0)) or ((icmp_ln14_reg_459 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (in_32b_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_32b_empty_n, out_bw_full_n, ap_enable_reg_pp0_iter1, icmp_ln14_reg_459, ap_enable_reg_pp0_iter32, icmp_ln14_reg_459_pp0_iter31_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln14_reg_459_pp0_iter31_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (out_bw_full_n = ap_const_logic_0)) or ((icmp_ln14_reg_459 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (in_32b_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_32b_empty_n, out_bw_full_n, ap_enable_reg_pp0_iter1, icmp_ln14_reg_459, ap_enable_reg_pp0_iter32, icmp_ln14_reg_459_pp0_iter31_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln14_reg_459_pp0_iter31_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (out_bw_full_n = ap_const_logic_0)) or ((icmp_ln14_reg_459 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (in_32b_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_pp0_stage0_iter32_assign_proc : process(out_bw_full_n, icmp_ln14_reg_459_pp0_iter31_reg)
    begin
                ap_block_state34_pp0_stage0_iter32 <= ((icmp_ln14_reg_459_pp0_iter31_reg = ap_const_lv1_0) and (out_bw_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_32b_empty_n, icmp_ln14_reg_459)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln14_reg_459 = ap_const_lv1_0) and (in_32b_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln14_fu_155_p2)
    begin
        if ((icmp_ln14_fu_155_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exp_fu_210_p4 <= reg_fu_203_p1(62 downto 52);
    grey_V_5_fu_310_p1 <= lshr_ln331_fu_304_p2(8 - 1 downto 0);
    grey_V_7_fu_422_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(in_grey_V_13_reg_580));

    grp_fu_124_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_124_ce <= ap_const_logic_1;
        else 
            grp_fu_124_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_128_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_128_ce <= ap_const_logic_1;
        else 
            grp_fu_128_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_133_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_133_ce <= ap_const_logic_1;
        else 
            grp_fu_133_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_138_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_138_ce <= ap_const_logic_1;
        else 
            grp_fu_138_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_143_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_143_ce <= ap_const_logic_1;
        else 
            grp_fu_143_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_143_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_fu_187_p3),64));

    grp_fu_146_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_146_ce <= ap_const_logic_1;
        else 
            grp_fu_146_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_146_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_473),64));
    icmp_ln14_fu_155_p2 <= "1" when (pixel_reg_113 = ap_const_lv14_3840) else "0";
    icmp_ln323_fu_228_p2 <= "1" when (trunc_ln306_fu_206_p1 = ap_const_lv63_0) else "0";
    icmp_ln327_fu_244_p2 <= "1" when (exp_fu_210_p4 = ap_const_lv11_433) else "0";
    icmp_ln329_fu_250_p2 <= "1" when (signed(sh_amt_fu_234_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln330_fu_271_p2 <= "1" when (signed(sh_amt_reg_537) < signed(ap_const_lv12_36)) else "0";
    icmp_ln337_fu_291_p2 <= "1" when (tmp_3_fu_281_p4 = ap_const_lv7_0) else "0";

    in_32b_blk_n_assign_proc : process(in_32b_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln14_reg_459)
    begin
        if (((icmp_ln14_reg_459 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_32b_blk_n <= in_32b_empty_n;
        else 
            in_32b_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_32b_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_459, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln14_reg_459 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_32b_read <= ap_const_logic_1;
        else 
            in_32b_read <= ap_const_logic_0;
        end if; 
    end process;

    in_BW_V_fu_434_p2 <= "1" when (unsigned(in_grey_V_fu_427_p3) > unsigned(ap_const_lv8_75)) else "0";
    in_grey_V_10_fu_391_p3 <= 
        ap_const_lv8_0 when (or_ln330_reg_575(0) = '1') else 
        in_grey_V_8_fu_385_p3;
    in_grey_V_12_fu_224_p1 <= reg_fu_203_p1(8 - 1 downto 0);
    in_grey_V_13_fu_408_p3 <= 
        in_grey_V_12_reg_524_pp0_iter30_reg when (and_ln327_fu_403_p2(0) = '1') else 
        in_grey_V_10_fu_391_p3;
    in_grey_V_7_fu_335_p3 <= 
        grey_V_5_fu_310_p1 when (and_ln330_fu_329_p2(0) = '1') else 
        ap_const_lv8_0;
    in_grey_V_8_fu_385_p3 <= 
        shl_ln339_fu_380_p2 when (and_ln337_reg_570(0) = '1') else 
        in_grey_V_7_reg_565;
    in_grey_V_fu_427_p3 <= 
        grey_V_7_fu_422_p2 when (p_Result_s_fu_415_p3(0) = '1') else 
        in_grey_V_13_reg_580;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln331_fu_304_p2 <= std_logic_vector(shift_right(unsigned(zext_ln320_fu_267_p1),to_integer(unsigned('0' & zext_ln331_fu_300_p1(31-1 downto 0)))));
    op2_fu_187_p3 <= (tmp_reg_468 & ap_const_lv16_0);
    or_ln327_fu_314_p2 <= (icmp_ln327_reg_548 or icmp_ln323_reg_530);
    or_ln329_fu_343_p2 <= (or_ln327_fu_314_p2 or icmp_ln329_reg_554);
    or_ln330_fu_372_p2 <= (icmp_ln323_reg_530 or and_ln330_1_fu_366_p2);

    out_bw_blk_n_assign_proc : process(out_bw_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter32, icmp_ln14_reg_459_pp0_iter31_reg)
    begin
        if (((icmp_ln14_reg_459_pp0_iter31_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_bw_blk_n <= out_bw_full_n;
        else 
            out_bw_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_bw_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_440_p4),16));

    out_bw_write_assign_proc : process(ap_enable_reg_pp0_iter32, icmp_ln14_reg_459_pp0_iter31_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln14_reg_459_pp0_iter31_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_bw_write <= ap_const_logic_1;
        else 
            out_bw_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_259_p3 <= (ap_const_lv1_1 & trunc_ln315_fu_256_p1);
    p_Result_s_fu_415_p3 <= reg_reg_518_pp0_iter31_reg(63 downto 63);
    pixel_1_fu_149_p2 <= std_logic_vector(unsigned(pixel_reg_113) + unsigned(ap_const_lv14_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    reg_fu_203_p1 <= val_reg_513;
    sh_amt_1_fu_276_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(trunc_ln326_reg_543));
    sh_amt_1cast_fu_377_p1 <= sh_amt_1_reg_560(8 - 1 downto 0);
    sh_amt_fu_234_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln311_fu_220_p1));
    shl_ln339_fu_380_p2 <= std_logic_vector(shift_left(unsigned(in_grey_V_12_reg_524_pp0_iter30_reg),to_integer(unsigned('0' & sh_amt_1cast_fu_377_p1(8-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    temp_BW_pkt_last_fu_161_p2 <= "1" when (pixel_reg_113 = ap_const_lv14_383F) else "0";
    tmp_1_fu_440_p4 <= ((temp_BW_pkt_last_reg_463_pp0_iter31_reg & ap_const_lv7_0) & in_BW_V_fu_434_p2);
    tmp_3_fu_281_p4 <= sh_amt_1_fu_276_p2(9 downto 3);
    trunc_ln306_fu_206_p1 <= reg_fu_203_p1(63 - 1 downto 0);
    trunc_ln315_fu_256_p1 <= reg_reg_518(52 - 1 downto 0);
    trunc_ln326_fu_240_p1 <= sh_amt_fu_234_p2(10 - 1 downto 0);
    trunc_ln331_fu_297_p1 <= sh_amt_reg_537(6 - 1 downto 0);
    xor_ln323_fu_398_p2 <= (icmp_ln323_reg_530_pp0_iter30_reg xor ap_const_lv1_1);
    xor_ln327_fu_318_p2 <= (or_ln327_fu_314_p2 xor ap_const_lv1_1);
    xor_ln329_fu_348_p2 <= (or_ln329_fu_343_p2 xor ap_const_lv1_1);
    xor_ln330_fu_360_p2 <= (icmp_ln330_fu_271_p2 xor ap_const_lv1_1);
    zext_ln311_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_fu_210_p4),12));
    zext_ln320_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_259_p3),54));
    zext_ln331_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln331_fu_297_p1),54));
end behav;
